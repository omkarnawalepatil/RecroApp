{"version":3,"sources":["ui/card/Card.js","ui/button/Button.js","ui/modal/CreateTaskModal.js","store/form-active.js","store/task-slice.js","ui/Input/Input.js","store/timeSlice.js","components/timer/Timer.js","components/new-task/NewTask.js","components/header/Header.js","components/task-list/TaskItem.js","components/task-list/TaskList.js","App.js","store/recro-store.js","index.js"],"names":["Card","props","className","children","Button","classes","type","onClick","disabled","CreateTaskModal","onClose","formActiveSlice","createSlice","initialState","isActive","name","reducers","switchActive","state","formActiveActions","actions","taskSlice","tasks","addTask","action","task","payload","push","id","length","taskActions","Input","label","placeholder","onChange","onBlur","onFocus","value","initial","clockSet","min","sec","isTimeout","timeSLice","setTime","resetTime","clockTick","timeActions","Timer","timer","useSelector","dispatch","useDispatch","useEffect","timeout","setTimeout","clearTimeout","NewTask","useState","title","setTitle","isTouched","setIsTouhced","showModal","setShowModal","formActive","reset","ReactDOM","createPortal","e","document","getElementById","onSubmit","preventDefault","inTime","target","Header","setMin","isAvtive","TaskItem","item","TaskList","console","log","map","App","store","configureStore","reducer","timeSlice","render"],"mappings":"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","file":"static/js/main.c0531c56.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n/**\r\n * @author\r\n * @function Card\r\n **/\r\n\r\nexport const Card = (props) => {\r\n\treturn <div className={`card ${props.className}`}> {props.children} </div>;\r\n};\r\n","import React from 'react';\r\nimport './Button.css';\r\n\r\n/**\r\n * @author\r\n * @function Button\r\n **/\r\n\r\nexport const Button = (props) => {\r\n\tlet classes = 'button ';\r\n\tif (props.type === 'close') {\r\n\t\tclasses += 'close ';\r\n\t} else if (props.type === 'header-button') {\r\n\t\tclasses += 'header-button ';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<button\r\n\t\t\ttype={props.type}\r\n\t\t\tonClick={props.onClick}\r\n\t\t\tclassName={classes}\r\n\t\t\tdisabled={props.disabled}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</button>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport './CreateTaskModal.css';\r\nimport { Card } from '../card/Card';\r\nimport { Button } from '../button/Button';\r\n\r\n/**\r\n * @author\r\n * @function CreateTaskModal\r\n **/\r\n\r\nexport const CreateTaskModal = (props) => {\r\n\treturn (\r\n\t\t<div className=\"backdrop\">\r\n\t\t\t<Card className=\"modal-card\">\r\n\t\t\t\t<h2 className=\"modal-title\">Confirm</h2>\r\n\t\t\t\t<p>Do you want to close task without saving</p>\r\n\t\t\t\t<div className=\"modal-buttons\">\r\n\t\t\t\t\t<Button onClick={props.onClick}>Yes</Button>\r\n\t\t\t\t\t<Button type=\"close\" onClick={props.onClose}>\r\n\t\t\t\t\t\tNo\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initial = {\r\n\tisActive: false,\r\n};\r\n\r\nconst formActiveSlice = createSlice({\r\n\tinitialState: initial,\r\n\tname: 'formActive',\r\n\treducers: {\r\n\t\tswitchActive: function (state) {\r\n\t\t\tstate.isActive = !state.isActive;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport default formActiveSlice.reducer;\r\n\r\nexport const formActiveActions = formActiveSlice.actions;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initial = {\r\n\ttasks: [],\r\n};\r\nconst taskSlice = createSlice({\r\n\tname: 'tasks',\r\n\tinitialState: initial,\r\n\treducers: {\r\n\t\taddTask: function (state, action) {\r\n\t\t\tvar task = action.payload;\r\n\t\t\tstate.tasks.push({\r\n\t\t\t\tid: state.tasks.length + 1,\r\n\t\t\t\t...task,\r\n\t\t\t});\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const taskActions = taskSlice.actions;\r\nexport default taskSlice.reducer;\r\n","import React from 'react';\r\nimport './Input.css';\r\n\r\n/**\r\n * @author\r\n * @function Input\r\n **/\r\n\r\nexport const Input = (props) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{/* <label htmlFor={props.label}> {props.label} </label> */}\r\n\t\t\t<input\r\n\t\t\t\ttype={props.type}\r\n\t\t\t\tclassName=\"input\"\r\n\t\t\t\tid={props.label}\r\n\t\t\t\tplaceholder={props.placeholder}\r\n\t\t\t\tonChange={props.onChange}\r\n\t\t\t\tonBlur={props.onBlur}\r\n\t\t\t\tonFocus={props.onFocus}\r\n\t\t\t\tvalue={props.value}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initial = {\r\n\tclockSet: 0,\r\n\tmin: 0,\r\n\tsec: 5,\r\n\tisTimeout: false,\r\n};\r\nconst timeSLice = createSlice({\r\n\tname: 'timer',\r\n\tinitialState: initial,\r\n\treducers: {\r\n\t\tsetTime: function (state, action) {\r\n\t\t\tstate.clockSet = action.payload.min;\r\n\t\t\tstate.min = action.payload.min;\r\n\t\t\tstate.sec = 0;\r\n\t\t\tstate.isTimeout = false;\r\n\t\t},\r\n\t\tresetTime: function (state) {\r\n\t\t\tstate = initial;\r\n\t\t},\r\n\r\n\t\tclockTick: function (state) {\r\n\t\t\tif (state.sec === 1) {\r\n\t\t\t\tstate.sec = 0;\r\n\t\t\t\tif (state.min === 0) {\r\n\t\t\t\t\tstate.isTimeout = true;\r\n\t\t\t\t}\r\n\t\t\t} else if (state.sec === 0) {\r\n\t\t\t\tstate.sec = 59;\r\n\t\t\t\tstate.min--;\r\n\t\t\t} else {\r\n\t\t\t\tstate.sec--;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const timeActions = timeSLice.actions;\r\n\r\nexport default timeSLice.reducer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { timeActions } from '../../store/timeSlice';\r\nimport './Timer.css';\r\n\r\n/**\r\n * @author\r\n * @function Timer\r\n **/\r\n\r\nexport const Timer = (props) => {\r\n\tconst timer = useSelector((state) => state.timer);\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tlet classes = 'clock ';\r\n\tuseEffect(() => {\r\n\t\tif (!timer.isTimeout) {\r\n\t\t\tvar timeout = setTimeout(() => {\r\n\t\t\t\tdispatch(timeActions.clockTick());\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tclearTimeout(timeout);\r\n\t\t};\r\n\t}, [timer]);\r\n\r\n\tif (timer.isTimeout) {\r\n\t\tclasses = classes + 'red';\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"timer-container\">\r\n\t\t\t<h3 className={classes}>\r\n\t\t\t\t{timer.min} {':'} {timer.sec}\r\n\t\t\t</h3>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { formActiveActions } from '../../store/form-active';\r\nimport { taskActions } from '../../store/task-slice';\r\nimport { Button } from '../../ui/button/Button';\r\nimport { Input } from '../../ui/Input/Input';\r\nimport { CreateTaskModal } from '../../ui/modal/CreateTaskModal';\r\nimport { Timer } from '../timer/Timer';\r\nimport './NewTask.css';\r\n\r\n/**\r\n * @author\r\n * @function NewTask\r\n **/\r\n\r\nconst NewTask = (props) => {\r\n\tconst [title, setTitle] = useState('');\r\n\tconst [isTouched, setIsTouhced] = useState(false);\r\n\tconst [showModal, setShowModal] = useState(false);\r\n\tconst isValid = title === '' || !isTouched ? false : true;\r\n\r\n\tconst formActive = useSelector((state) => state.formActive);\r\n\tconst timer = useSelector((state) => state.timer);\r\n\r\n\tconst dispatch = useDispatch();\r\n\tlet classes = 'new-task ';\r\n\tif (!formActive.isActive) {\r\n\t\tclasses += 'inactive ';\r\n\t}\r\n\r\n\tconst modalClickHandler = (e) => {\r\n\t\treset();\r\n\t\tdispatch(formActiveActions.switchActive());\r\n\t\tsetShowModal(false);\r\n\t};\r\n\r\n\tconst modalCloseHandler = (e) => {\r\n\t\tsetShowModal(false);\r\n\t};\r\n\r\n\tconst closeButtonClickHandler = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\t// alert(title);\r\n\r\n\t\tif (title !== '') {\r\n\t\t\tsetShowModal(true);\r\n\t\t} else {\r\n\t\t\tdispatch(formActiveActions.switchActive());\r\n\t\t}\r\n\t};\r\n\r\n\tconst titleChangeHandler = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (!isTouched) {\r\n\t\t\tsetIsTouhced(true);\r\n\t\t}\r\n\t\tsetTitle(e.target.value);\r\n\t};\r\n\r\n\tconst formSubmitHandler = (e) => {\r\n\t\te.preventDefault();\r\n\t\tvar task = {\r\n\t\t\ttitle: title,\r\n\t\t\tinTime: timer.min === 0 && timer.sec === 0 ? false : true,\r\n\t\t};\r\n\t\tdispatch(taskActions.addTask(task));\r\n\t\tdispatch(formActiveActions.switchActive());\r\n\r\n\t\treset();\r\n\t};\r\n\r\n\tconst reset = () => {\r\n\t\tsetTitle('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={classes}>\r\n\t\t\t{showModal &&\r\n\t\t\t\tReactDOM.createPortal(\r\n\t\t\t\t\t<CreateTaskModal\r\n\t\t\t\t\t\tonClick={modalClickHandler}\r\n\t\t\t\t\t\tonClose={modalCloseHandler}\r\n\t\t\t\t\t/>,\r\n\t\t\t\t\tdocument.getElementById('root')\r\n\t\t\t\t)}\r\n\t\t\t<div className=\"form-card\">\r\n\t\t\t\t<div className=\"title-container\">\r\n\t\t\t\t\t<h2 className=\"form-title\">Create new task</h2>\r\n\t\t\t\t\t<Timer />\r\n\t\t\t\t</div>\r\n\t\t\t\t<hr />\r\n\t\t\t\t<form className=\"create-task-form\" onSubmit={formSubmitHandler}>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\tlabel=\"Title\"\r\n\t\t\t\t\t\tplaceholder=\"Enter title\"\r\n\t\t\t\t\t\tvalue={title}\r\n\t\t\t\t\t\tonChange={titleChangeHandler}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<div className=\"button-group\">\r\n\t\t\t\t\t\t<Button type=\"submit\" disabled={title === ''}>\r\n\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tclassName=\"close\"\r\n\t\t\t\t\t\t\ttype=\"close\"\r\n\t\t\t\t\t\t\tonClick={closeButtonClickHandler}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tClose\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default NewTask;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { formActiveActions } from '../../store/form-active';\r\nimport { timeActions } from '../../store/timeSlice';\r\nimport { Button } from '../../ui/button/Button';\r\nimport { Input } from '../../ui/Input/Input';\r\nimport './Header.css';\r\n\r\n/**\r\n * @author\r\n * @function Header\r\n **/\r\n\r\nexport const Header = (props) => {\r\n\tconst formActive = useSelector((state) => state.formActive);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst [min, setMin] = useState(2);\r\n\tconst createTaskHandler = (e) => {\r\n\t\tif (!formActive.isAvtive) {\r\n\t\t\tdispatch(\r\n\t\t\t\ttimeActions.setTime({\r\n\t\t\t\t\tmin: min,\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\tdispatch(formActiveActions.switchActive());\r\n\t};\r\n\r\n\tconst minutesChangeHandler = (e) => {\r\n\t\tsetMin(e.target.value);\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"header-container\">\r\n\t\t\t<div className=\"header\">\r\n\t\t\t\t<h2>Recro Task</h2>\r\n\t\t\t\t<div className=\"header-controls\">\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tplaceholder=\"Enter minutes\"\r\n\t\t\t\t\t\tonChange={minutesChangeHandler}\r\n\t\t\t\t\t\tvalue={min}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\ttype=\"header-button\"\r\n\t\t\t\t\t\tonClick={createTaskHandler}\r\n\t\t\t\t\t\tdisabled={formActive.isActive}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tCreate new\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { Card } from '../../ui/card/Card';\r\nimport './TaskItem.css';\r\n/**\r\n * @author\r\n * @function TaskItem\r\n **/\r\n\r\nexport const TaskItem = (props) => {\r\n\tvar classes = 'task-holder ';\r\n\tif (!props.item.inTime) {\r\n\t\tclasses += 'red';\r\n\t}\r\n\treturn (\r\n\t\t<Card className={classes}>\r\n\t\t\t<h3 className=\"task-title\"> {props.item.title} </h3>\r\n\t\t\t{props.item.inTime && (\r\n\t\t\t\t<h3 className=\"completion-time\"> Within Time </h3>\r\n\t\t\t)}\r\n\t\t\t{!props.item.inTime && (\r\n\t\t\t\t<h3 className=\"completion-time\"> Not in Time </h3>\r\n\t\t\t)}\r\n\t\t</Card>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card } from '../../ui/card/Card';\r\nimport { TaskItem } from './TaskItem';\r\nimport './TaskList.css';\r\n/**\r\n * @author\r\n * @function TaskList\r\n **/\r\n\r\nexport const TaskList = (props) => {\r\n\tconst formActive = useSelector((state) => state.formActive);\r\n\tconst tasks = useSelector((state) => state.tasks);\r\n\r\n\tlet classes = 'task-list-holder ';\r\n\tif (formActive.isActive) {\r\n\t\tclasses += 'form-active';\r\n\t}\r\n\tconsole.log(tasks.tasks);\r\n\t// const tasks = props.taskList ? props.taskList : staticTasks;\r\n\t// const tasks = undefined;\r\n\treturn (\r\n\t\t<Card className={classes}>\r\n\t\t\t<h2 className=\"task-list-title\">Task List</h2>\r\n\t\t\t{tasks.tasks.length !== 0 &&\r\n\t\t\t\ttasks.tasks.map((item) => (\r\n\t\t\t\t\t<TaskItem key={item.id} item={item} />\r\n\t\t\t\t))}\r\n\t\t\t{tasks.tasks.length === 0 && (\r\n\t\t\t\t<h3 className=\"no-list\">No tasks found</h3>\r\n\t\t\t)}\r\n\t\t</Card>\r\n\t);\r\n};\r\n","import './App.css';\nimport { Fragment } from 'react';\nimport { CreateTaskModal } from './ui/modal/CreateTaskModal';\nimport NewTask from './components/new-task/NewTask';\nimport { Header } from './components/header/Header';\nimport { TaskList } from './components/task-list/TaskList';\nimport { useSelector } from 'react-redux';\n\nfunction App() {\n\treturn (\n\t\t<Fragment>\n\t\t\t<Header />\n\t\t\t{/* <CreateTaskModal /> */}\n\t\t\t<NewTask />\n\t\t\t<TaskList />\n\t\t</Fragment>\n\t);\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport formActiveSlice from './form-active';\r\nimport taskSlice from './task-slice';\r\nimport timeSlice from './timeSlice';\r\n\r\nconst store = configureStore({\r\n\treducer: {\r\n\t\ttimer: timeSlice,\r\n\t\tformActive: formActiveSlice,\r\n\t\ttasks: taskSlice,\r\n\t},\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/recro-store';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}